{"ast":null,"code":"function splitFileData(data, length) {\n  let table = new Array(length * length);\n  table.fill(false);\n  const tmpTable = data.split(\";\");\n\n  for (let index = 0; index < tmpTable.length; index++) {\n    const tmpCoord = tmpTable[index].split(\",\");\n    table[length * Number(tmpCoord[1]) + Number(tmpCoord[0])] = true;\n  }\n\n  console.log(table);\n  return table;\n}\n\nexport default function calculateActiveCells(data) {\n  const splitData = data.split(\"\\n\");\n  const mapLength = Number(splitData[0]);\n  const fileCoordinates = splitFileData(splitData[1], mapLength);\n  return {\n    mapLength,\n    fileCoordinates\n  };\n}","map":{"version":3,"sources":["/Users/heloisetronche/dev/Internship_test/LivePlus/src/utils/calculateActiveCells.ts"],"names":["splitFileData","data","length","table","Array","fill","tmpTable","split","index","tmpCoord","Number","console","log","calculateActiveCells","splitData","mapLength","fileCoordinates"],"mappings":"AAAA,SAASA,aAAT,CAAuBC,IAAvB,EAAqCC,MAArC,EAAgE;AAC9D,MAAIC,KAAgB,GAAG,IAAIC,KAAJ,CAAUF,MAAM,GAACA,MAAjB,CAAvB;AACAC,EAAAA,KAAK,CAACE,IAAN,CAAW,KAAX;AAEA,QAAMC,QAAQ,GAAGL,IAAI,CAACM,KAAL,CAAW,GAAX,CAAjB;;AAEA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,QAAQ,CAACJ,MAArC,EAA6CM,KAAK,EAAlD,EAAsD;AACpD,UAAMC,QAAQ,GAAGH,QAAQ,CAACE,KAAD,CAAR,CAAgBD,KAAhB,CAAsB,GAAtB,CAAjB;AAEAJ,IAAAA,KAAK,CAAED,MAAM,GAAGQ,MAAM,CAACD,QAAQ,CAAC,CAAD,CAAT,CAAhB,GAAiCC,MAAM,CAACD,QAAQ,CAAC,CAAD,CAAT,CAAxC,CAAL,GAA8D,IAA9D;AACD;;AAEDE,EAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACA,SAAOA,KAAP;AACD;;AAED,eAAe,SAASU,oBAAT,CAA8BZ,IAA9B,EAA8F;AAC3G,QAAMa,SAAS,GAAGb,IAAI,CAACM,KAAL,CAAW,IAAX,CAAlB;AACA,QAAMQ,SAAS,GAAIL,MAAM,CAACI,SAAS,CAAC,CAAD,CAAV,CAAzB;AAEA,QAAME,eAAe,GAAGhB,aAAa,CAACc,SAAS,CAAC,CAAD,CAAV,EAAeC,SAAf,CAArC;AAEA,SAAO;AAAEA,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAP;AACD","sourcesContent":["function splitFileData(data: string, length: number): boolean[] {\n  let table: boolean[] = new Array(length*length);\n  table.fill(false);\n  \n  const tmpTable = data.split(\";\");\n\n  for (let index = 0; index < tmpTable.length; index++) {\n    const tmpCoord = tmpTable[index].split(\",\");\n\n    table[(length * Number(tmpCoord[1])) + Number(tmpCoord[0])] = true;\n  }\n  \n  console.log(table);\n  return table;\n}\n\nexport default function calculateActiveCells(data: string): {mapLength: number, fileCoordinates: boolean[] } {\n  const splitData = data.split(\"\\n\");\n  const mapLength =  Number(splitData[0]);\n  \n  const fileCoordinates = splitFileData(splitData[1], mapLength);\n  \n  return { mapLength, fileCoordinates }\n}"]},"metadata":{},"sourceType":"module"}