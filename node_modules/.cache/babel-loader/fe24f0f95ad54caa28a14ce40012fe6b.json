{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\nimport reducers from 'reducers/index';\nimport rootSaga from 'sagas/root';\nconst sagaMiddleware = createSagaMiddleware();\nconst persistConfig = {\n  key: 'root',\n  storage,\n  stateReconciler: autoMergeLevel2,\n  whitelist: ['userState'],\n  timeout: null\n}; // @ts-ignore\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\nconst composeEnhancers = compose;\nexport const store = createStore(persistedReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\nexport const persistor = persistStore(store);\nsagaMiddleware.run(rootSaga);","map":{"version":3,"sources":["/Users/heloisetronche/dev/Internship_test/LivePlus/src/store.ts"],"names":["createStore","applyMiddleware","compose","createSagaMiddleware","persistStore","persistReducer","storage","autoMergeLevel2","reducers","rootSaga","sagaMiddleware","persistConfig","key","stateReconciler","whitelist","timeout","persistedReducer","composeEnhancers","store","persistor","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,eAAP,MAA4B,mDAA5B;AAEA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,cAAc,GAAGP,oBAAoB,EAA3C;AAEA,MAAMQ,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBN,EAAAA,OAFoB;AAGpBO,EAAAA,eAAe,EAAEN,eAHG;AAIpBO,EAAAA,SAAS,EAAE,CAAC,WAAD,CAJS;AAKpBC,EAAAA,OAAO,EAAE;AALW,CAAtB,C,CAQA;;AACA,MAAMC,gBAAgB,GAAGX,cAAc,CAACM,aAAD,EAAgBH,QAAhB,CAAvC;AAEA,MAAMS,gBAAgB,GAAGf,OAAzB;AAEA,OAAO,MAAMgB,KAAK,GAAGlB,WAAW,CAACgB,gBAAD,EAAmBC,gBAAgB,CAAChB,eAAe,CAACS,cAAD,CAAhB,CAAnC,CAAzB;AACP,OAAO,MAAMS,SAAS,GAAGf,YAAY,CAACc,KAAD,CAA9B;AAEPR,cAAc,CAACU,GAAf,CAAmBX,QAAnB","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\n\nimport reducers from 'reducers/index';\nimport rootSaga from 'sagas/root';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  stateReconciler: autoMergeLevel2,\n  whitelist: ['userState'],\n  timeout: null,\n};\n\n// @ts-ignore\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\nconst composeEnhancers = compose;\n\nexport const store = createStore(persistedReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\nexport const persistor = persistStore(store);\n\nsagaMiddleware.run(rootSaga);\n"]},"metadata":{},"sourceType":"module"}