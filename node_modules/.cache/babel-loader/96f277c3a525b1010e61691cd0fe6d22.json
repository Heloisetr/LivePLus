{"ast":null,"code":"import { takeLatest, put } from 'redux-saga/effects';\nimport { getInitialCoordinatesFailure, GET_INITIAL_COORDINATES } from 'actions/dashboardAction';\n\nfunction* getInitialCoordinatesFunction() {\n  try {\n    fetch('./testt').then(r => r.text()).then(text => {\n      console.log(text);\n    }); //const file = fs.readFileSync('file.txt', 'utf8');\n    //console.log(file);\n    //const data = yield movies$.then();\n    //if (data && data.length > 0) {\n\n    /*const moviesData: MoviesAllDataContentType = {\n      movies: data,\n      categories: getMoviesCategories(data),\n    }*/\n    //  yield put(getInitialCoordinatesSuccess())\n    //} else {\n    //  yield put(getInitialCoordinatesFailure());\n    //}\n  } catch (e) {\n    yield put(getInitialCoordinatesFailure());\n  }\n}\n\nexport default function* dashboardSaga() {\n  yield takeLatest(GET_INITIAL_COORDINATES, getInitialCoordinatesFunction);\n}","map":{"version":3,"sources":["/Users/heloisetronche/dev/Internship_test/LivePlus/src/sagas/dashboardSaga.ts"],"names":["takeLatest","put","getInitialCoordinatesFailure","GET_INITIAL_COORDINATES","getInitialCoordinatesFunction","fetch","then","r","text","console","log","e","dashboardSaga"],"mappings":"AAAA,SAAeA,UAAf,EAA2BC,GAA3B,QAAsC,oBAAtC;AAEA,SAEEC,4BAFF,EAGEC,uBAHF,QAIO,yBAJP;;AAMA,UAAUC,6BAAV,GAA0C;AACxC,MAAI;AACFC,IAAAA,KAAK,CAAC,SAAD,CAAL,CAAiBC,IAAjB,CACGC,CAAD,IAAOA,CAAC,CAACC,IAAF,EADT,EAEEF,IAFF,CAEOE,IAAI,IAAI;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,KAJD,EADE,CAML;AACA;AACG;AAEA;;AACE;AACN;AACA;AACA;AACI;AACA;AACA;AACA;AACD,GAnBD,CAmBE,OAAOG,CAAP,EAAU;AACV,UAAMV,GAAG,CAACC,4BAA4B,EAA7B,CAAT;AACD;AACF;;AAED,eAAe,UAAUU,aAAV,GAA0B;AACvC,QAAMZ,UAAU,CAACG,uBAAD,EAA0BC,6BAA1B,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\n\nimport {\n  getInitialCoordinatesSuccess,\n  getInitialCoordinatesFailure,\n  GET_INITIAL_COORDINATES,\n} from 'actions/dashboardAction';\n\nfunction* getInitialCoordinatesFunction() {\n  try {\n    fetch('./testt').then(\n      (r) => r.text()\n    ).then(text => {\n      console.log(text);\n    })\n //const file = fs.readFileSync('file.txt', 'utf8');\n //console.log(file);\n    //const data = yield movies$.then();\n  \n    //if (data && data.length > 0) {\n      /*const moviesData: MoviesAllDataContentType = {\n        movies: data,\n        categories: getMoviesCategories(data),\n      }*/\n    //  yield put(getInitialCoordinatesSuccess())\n    //} else {\n    //  yield put(getInitialCoordinatesFailure());\n    //}\n  } catch (e) {\n    yield put(getInitialCoordinatesFailure());\n  }\n}\n\nexport default function* dashboardSaga() {\n  yield takeLatest(GET_INITIAL_COORDINATES, getInitialCoordinatesFunction);\n}"]},"metadata":{},"sourceType":"module"}