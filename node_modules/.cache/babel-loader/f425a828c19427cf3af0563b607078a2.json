{"ast":null,"code":"function splitFileData(data, length) {\n  let table = new Array(length * length);\n  table.fill(false);\n  const tmpTable = data.split(\";\");\n\n  for (let index = 0; index < tmpTable.length; index++) {\n    const tmpCoord = tmpTable[index].split(\",\");\n    table[length * Number(tmpCoord[1]) + Number(tmpCoord[0])] = true;\n  }\n\n  return table;\n}\n\nexport function calculateActiveCells(data) {\n  const splitData = data.split(\"\\n\");\n  const mapLength = Number(splitData[0]);\n  const fileCoordinates = splitFileData(splitData[1], mapLength);\n  return {\n    mapLength,\n    fileCoordinates\n  };\n}\n\nfunction calculateCell(coordData, index) {\n  let countAlive = 0;\n\n  if (index % coordData.mapLength !== 0 && coordData.coordinates[index - 1]) {\n    countAlive = countAlive + 1;\n  }\n\n  if (index % (coordData.mapLength - 1) !== 0 && coordData.coordinates[index + 1]) {\n    countAlive = countAlive + 1;\n  }\n\n  if (index > coordData.mapLength && coordData.coordinates[index - coordData.mapLength]) {\n    countAlive = countAlive + 1;\n  }\n\n  if (index < coordData.mapLength * (coordData.mapLength - 1) && coordData.coordinates[index + coordData.mapLength]) {\n    countAlive = countAlive + 1;\n  }\n\n  console.log(index);\n\n  switch (coordData.coordinates[index]) {\n    case true:\n      return countAlive > 1 ? true : false;\n\n    case false:\n      return countAlive === 3 ? true : false;\n\n    default:\n      return false;\n  }\n}\n\nexport function modifyCells(coordData) {\n  const table = [];\n  const coord = coordData.coordinates;\n  coord.map((cell, index) => {\n    table.push(calculateCell(coordData, index));\n  });\n  console.log(table);\n  return table;\n}","map":{"version":3,"sources":["/Users/heloisetronche/dev/Internship_test/LivePlus/src/utils/calculateActiveCells.ts"],"names":["splitFileData","data","length","table","Array","fill","tmpTable","split","index","tmpCoord","Number","calculateActiveCells","splitData","mapLength","fileCoordinates","calculateCell","coordData","countAlive","coordinates","console","log","modifyCells","coord","map","cell","push"],"mappings":"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","sourcesContent":["import { CoordinatesContentType } from \"types/CoordinatesType\";\n\nfunction splitFileData(data: string, length: number): boolean[] {\n  let table: boolean[] = new Array(length*length);\n  table.fill(false);\n  \n  const tmpTable = data.split(\";\");\n\n  for (let index = 0; index < tmpTable.length; index++) {\n    const tmpCoord = tmpTable[index].split(\",\");\n\n    table[(length * Number(tmpCoord[1])) + Number(tmpCoord[0])] = true;\n  }\n  \n  return table;\n}\n\nexport function calculateActiveCells(data: string): {mapLength: number, fileCoordinates: boolean[] } {\n  const splitData = data.split(\"\\n\");\n  const mapLength =  Number(splitData[0]);\n  \n  const fileCoordinates = splitFileData(splitData[1], mapLength);\n  \n  return { mapLength, fileCoordinates }\n}\n\n\nfunction calculateCell(coordData: CoordinatesContentType, index: number): boolean {\n  let countAlive = 0;\n  \n  if ((index % coordData.mapLength) !== 0 && coordData.coordinates[index - 1]) {\n    countAlive = countAlive + 1;\n  }\n  if ((index % (coordData.mapLength - 1)) !== 0 && coordData.coordinates[index + 1]) {\n    countAlive = countAlive + 1;\n  }\n  if (index > coordData.mapLength && coordData.coordinates[index - coordData.mapLength]) {\n    countAlive = countAlive + 1;\n  }\n  if (index < (coordData.mapLength * (coordData.mapLength - 1)) && coordData.coordinates[index + coordData.mapLength]) {\n    countAlive = countAlive + 1;\n  }\n\n  console.log(index);\n  switch(coordData.coordinates[index]) {\n    case true:\n      return (countAlive > 1 ? true : false);\n\n    case false:\n      return (countAlive === 3 ? true : false);\n\n    default:\n      return false;\n  }\n}\n\nexport function modifyCells(coordData: CoordinatesContentType): boolean[] {\n  const table: boolean[]= [];\n  const coord = coordData.coordinates;\n\n  coord.map((cell, index) => {\n    table.push(calculateCell(coordData, index));\n  });\n\n  console.log(table);\n  return table;\n}"]},"metadata":{},"sourceType":"module"}