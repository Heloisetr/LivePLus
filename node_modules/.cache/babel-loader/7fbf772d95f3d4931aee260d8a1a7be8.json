{"ast":null,"code":"import { takeLatest, put, select } from 'redux-saga/effects';\nimport { getInitialCoordinatesSuccess, getInitialCoordinatesFailure, GET_INITIAL_COORDINATES, getNextGenerationFailure, getNextGenerationSuccess, GET_NEXT_GENERATION } from 'actions/dashboardAction';\nimport { calculateActiveCells, convertToDataBrut, modifyCells } from 'utils/calculateActiveCells';\n\nfunction* getInitialCoordinatesFunction(action) {\n  const {\n    payload\n  } = action;\n\n  try {\n    if (payload.length > 0) {\n      const data = calculateActiveCells(payload);\n      yield put(getInitialCoordinatesSuccess({\n        mapLength: data.mapLength,\n        coordinates: data.fileCoordinates,\n        dataBrut: ''\n      }));\n    } else {\n      yield put(getInitialCoordinatesFailure());\n    }\n  } catch (e) {\n    yield put(getInitialCoordinatesFailure());\n  }\n}\n\nfunction* getNextGenerationFunction() {\n  const {\n    dashboardState: {\n      coordData\n    }\n  } = yield select();\n  const coordinates = modifyCells(coordData);\n  const dataBrut = `${coordData.mapLength}\\n${convertToDataBrut(coordinates, coordData.mapLength)}`;\n\n  try {\n    yield put(getNextGenerationSuccess({\n      mapLength: coordData.mapLength,\n      coordinates,\n      dataBrut\n    }));\n  } catch (e) {\n    yield put(getNextGenerationFailure());\n  }\n}\n\nexport default function* dashboardSaga() {\n  yield takeLatest(GET_INITIAL_COORDINATES, getInitialCoordinatesFunction);\n  yield takeLatest(GET_NEXT_GENERATION, getNextGenerationFunction);\n}","map":{"version":3,"sources":["/Users/heloisetronche/dev/Internship_test/LivePlus/src/sagas/dashboardSaga.ts"],"names":["takeLatest","put","select","getInitialCoordinatesSuccess","getInitialCoordinatesFailure","GET_INITIAL_COORDINATES","getNextGenerationFailure","getNextGenerationSuccess","GET_NEXT_GENERATION","calculateActiveCells","convertToDataBrut","modifyCells","getInitialCoordinatesFunction","action","payload","length","data","mapLength","coordinates","fileCoordinates","dataBrut","e","getNextGenerationFunction","dashboardState","coordData","dashboardSaga"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,MAA1B,QAAwC,oBAAxC;AAEA,SACEC,4BADF,EAEEC,4BAFF,EAGEC,uBAHF,EAKEC,wBALF,EAMEC,wBANF,EAOEC,mBAPF,QAQO,yBARP;AAUA,SAASC,oBAAT,EAA+BC,iBAA/B,EAAkDC,WAAlD,QAAqE,4BAArE;;AAEA,UAAUC,6BAAV,CAAwCC,MAAxC,EAAgF;AAC9E,QAAM;AAAEC,IAAAA;AAAF,MAAcD,MAApB;;AAEA,MAAI;AACF,QAAIC,OAAO,CAACC,MAAR,GAAiB,CAArB,EAAwB;AACtB,YAAMC,IAAI,GAAGP,oBAAoB,CAACK,OAAD,CAAjC;AAEA,YAAMb,GAAG,CAACE,4BAA4B,CAAC;AAAEc,QAAAA,SAAS,EAAED,IAAI,CAACC,SAAlB;AAA6BC,QAAAA,WAAW,EAAEF,IAAI,CAACG,eAA/C;AAAgEC,QAAAA,QAAQ,EAAE;AAA1E,OAAD,CAA7B,CAAT;AACD,KAJD,MAIO;AACL,YAAMnB,GAAG,CAACG,4BAA4B,EAA7B,CAAT;AACD;AACF,GARD,CAQE,OAAOiB,CAAP,EAAU;AACV,UAAMpB,GAAG,CAACG,4BAA4B,EAA7B,CAAT;AACD;AACF;;AAED,UAAUkB,yBAAV,GAAsC;AACpC,QAAM;AACJC,IAAAA,cAAc,EAAE;AAAEC,MAAAA;AAAF;AADZ,MAEF,MAAMtB,MAAM,EAFhB;AAIA,QAAMgB,WAAW,GAAGP,WAAW,CAACa,SAAD,CAA/B;AACA,QAAMJ,QAAQ,GAAI,GAAEI,SAAS,CAACP,SAAU,KAAIP,iBAAiB,CAACQ,WAAD,EAAcM,SAAS,CAACP,SAAxB,CAAmC,EAAhG;;AAEA,MAAI;AACF,UAAMhB,GAAG,CAACM,wBAAwB,CAAC;AAAEU,MAAAA,SAAS,EAAEO,SAAS,CAACP,SAAvB;AAAkCC,MAAAA,WAAlC;AAA+CE,MAAAA;AAA/C,KAAD,CAAzB,CAAT;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACV,UAAMpB,GAAG,CAACK,wBAAwB,EAAzB,CAAT;AACD;AACF;;AAED,eAAe,UAAUmB,aAAV,GAA0B;AACvC,QAAMzB,UAAU,CAACK,uBAAD,EAA0BO,6BAA1B,CAAhB;AACA,QAAMZ,UAAU,CAACQ,mBAAD,EAAsBc,yBAAtB,CAAhB;AACD","sourcesContent":["import { takeLatest, put, select } from 'redux-saga/effects';\n\nimport {\n  getInitialCoordinatesSuccess,\n  getInitialCoordinatesFailure,\n  GET_INITIAL_COORDINATES,\n  GET_INITIAL_COORDINATES_ACTION,\n  getNextGenerationFailure,\n  getNextGenerationSuccess,\n  GET_NEXT_GENERATION,\n} from 'actions/dashboardAction';\n\nimport { calculateActiveCells, convertToDataBrut, modifyCells } from 'utils/calculateActiveCells';\n\nfunction* getInitialCoordinatesFunction(action: GET_INITIAL_COORDINATES_ACTION) {\n  const { payload } = action;\n\n  try {\n    if (payload.length > 0) {\n      const data = calculateActiveCells(payload);\n\n      yield put(getInitialCoordinatesSuccess({ mapLength: data.mapLength, coordinates: data.fileCoordinates, dataBrut: ''}))\n    } else {\n      yield put(getInitialCoordinatesFailure());\n    }\n  } catch (e) {\n    yield put(getInitialCoordinatesFailure());\n  }\n}\n\nfunction* getNextGenerationFunction() {\n  const { \n    dashboardState: { coordData },\n  } = yield select();\n\n  const coordinates = modifyCells(coordData);\n  const dataBrut = `${coordData.mapLength}\\n${convertToDataBrut(coordinates, coordData.mapLength)}`;\n\n  try {\n    yield put(getNextGenerationSuccess({ mapLength: coordData.mapLength, coordinates, dataBrut }));\n  } catch (e) {\n    yield put(getNextGenerationFailure())\n  }\n}\n\nexport default function* dashboardSaga() {\n  yield takeLatest(GET_INITIAL_COORDINATES, getInitialCoordinatesFunction);\n  yield takeLatest(GET_NEXT_GENERATION, getNextGenerationFunction);\n}"]},"metadata":{},"sourceType":"module"}